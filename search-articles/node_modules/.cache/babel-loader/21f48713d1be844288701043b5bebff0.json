{"ast":null,"code":"var _jsxFileName = \"C:\\\\work-code\\\\mern-again\\\\search-articles\\\\src\\\\routers\\\\AppRouter.js\";\nimport React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Header from \"../components/Header\";\nimport Articles from \"../components/Articles\";\nimport Titles from \"../components/Titles\";\nimport Words from \"../components/Words\";\nimport NotFound from \"../components/NotFound\";\nimport { SearchContext } from \"../context/searchContext\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AppRouter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchword: \"\",\n      articlesFromGNews: [],\n      searchWordsFromDB: [],\n      articleTitlesFromMongo: []\n    };\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  componentDidMount() {\n    // get articles from gNews, 24h old\n    const time = moment().subtract(2, \"days\").toISOString().split(\".\")[0] + \"Z\";\n    fetch(`https://gnews.io/api/v4/search?q=news&in=content&lang=en&from=${time}&max=9&token=8dbeb974cde3adbf5fbdb91d32ed9f61`).then(function (response) {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        articlesFromGNews: data.articles\n      });\n    }); // get from mongoDB searchwords arr\n\n    axios.get(\"http://localhost:5000/words\").then(response => {\n      const tempArr = [];\n      response.data.map(object => tempArr.push(object.word));\n      this.setState({\n        searchWordsFromDB: tempArr\n      });\n      console.log(\"approuter-searchWordsFromDB\", this.state.searchWordsFromDB);\n    }).catch(err => {\n      console.log(err);\n    }); // get titles from mongoDB\n\n    axios.get(\"http://localhost:5000/articles\").then(response => {\n      if (response.data.length > 0) {\n        const arrTitles = [];\n        response.data.map(object => arrTitles.push(object.article));\n        this.setState({\n          articleTitlesFromMongo: arrTitles\n        });\n        console.log(\"approuter-articleTitlesFromMongo\", this.state.articleTitlesFromMongo);\n      }\n    });\n  }\n\n  handleSearch(searchword, language, from, to) {\n    this.setState({\n      searchword: searchword\n    });\n    console.log(\"searchword from handleSearch\", searchword); // send search word to mongoDB\n\n    const word = {\n      word: searchword,\n      count: 8\n    };\n    axios.post(\"http://localhost:5000/words/add\", word).then(response => console.log(\"response.data\", response.data)); // add to front\n\n    let temparr = this.state.searchWordsFromDB;\n    this.setState({\n      searchWordsFromDB: temparr\n    });\n    console.log(\"adding front\", this.state.searchWordsFromDB); // get gNews articles by searchword\n\n    let wordForSearching = searchword === \"\" ? \"news\" : searchword;\n    fetch(`https://gnews.io/api/v4/search?q=${wordForSearching}&in=content&lang=${language}&from=${from}&to=${to}&max=9&token=8dbeb974cde3adbf5fbdb91d32ed9f61`).then(function (response) {\n      return response.json();\n    }).then(data => {\n      this.setState({\n        articlesFromGNews: data.articles\n      });\n      console.log(this.state.articlesFromGNews);\n    });\n    console.log(this.state.articlesFromGNews);\n  }\n\n  render() {\n    const searchContextValue = {\n      handleSearch: this.handleSearch,\n      searchWordsFromDB: this.state.searchWordsFromDB,\n      articlesFromGNews: this.state.articlesFromGNews,\n      articleTitlesFromMongo: this.state.articleTitlesFromMongo\n    };\n    return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(SearchContext.Provider, {\n        value: searchContextValue,\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            component: Articles,\n            exact: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/titles\",\n            component: Titles\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/words\",\n            component: Words\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            component: NotFound\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AppRouter;","map":{"version":3,"sources":["C:/work-code/mern-again/search-articles/src/routers/AppRouter.js"],"names":["React","BrowserRouter","Route","Switch","axios","Header","Articles","Titles","Words","NotFound","SearchContext","moment","AppRouter","Component","constructor","props","state","searchword","articlesFromGNews","searchWordsFromDB","articleTitlesFromMongo","handleSearch","bind","componentDidMount","time","subtract","toISOString","split","fetch","then","response","json","data","setState","articles","get","tempArr","map","object","push","word","console","log","catch","err","length","arrTitles","article","language","from","to","count","post","temparr","wordForSearching","render","searchContextValue"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Header from \"../components/Header\";\r\nimport Articles from \"../components/Articles\";\r\nimport Titles from \"../components/Titles\";\r\nimport Words from \"../components/Words\";\r\nimport NotFound from \"../components/NotFound\";\r\nimport { SearchContext } from \"../context/searchContext\";\r\nimport moment from \"moment\";\r\n\r\nclass AppRouter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchword: \"\",\r\n      articlesFromGNews: [],\r\n      searchWordsFromDB: [],\r\n      articleTitlesFromMongo: [],\r\n    };\r\n\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // get articles from gNews, 24h old\r\n    const time = moment().subtract(2, \"days\").toISOString().split(\".\")[0] + \"Z\";\r\n    fetch(\r\n      `https://gnews.io/api/v4/search?q=news&in=content&lang=en&from=${time}&max=9&token=8dbeb974cde3adbf5fbdb91d32ed9f61`\r\n    )\r\n      .then(function (response) {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        this.setState({ articlesFromGNews: data.articles });\r\n      });\r\n\r\n    // get from mongoDB searchwords arr\r\n    axios\r\n      .get(\"http://localhost:5000/words\")\r\n      .then((response) => {\r\n        const tempArr = [];\r\n        response.data.map((object) => tempArr.push(object.word));\r\n        this.setState({ searchWordsFromDB: tempArr });\r\n        console.log(\r\n          \"approuter-searchWordsFromDB\",\r\n          this.state.searchWordsFromDB\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    // get titles from mongoDB\r\n    axios.get(\"http://localhost:5000/articles\").then((response) => {\r\n      if (response.data.length > 0) {\r\n        const arrTitles = [];\r\n        response.data.map((object) => arrTitles.push(object.article));\r\n        this.setState({ articleTitlesFromMongo: arrTitles });\r\n        console.log(\r\n          \"approuter-articleTitlesFromMongo\",\r\n          this.state.articleTitlesFromMongo\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  handleSearch(searchword, language, from, to) {\r\n    this.setState({\r\n      searchword: searchword,\r\n    });\r\n    console.log(\"searchword from handleSearch\", searchword);\r\n\r\n    // send search word to mongoDB\r\n    const word = {\r\n      word: searchword,\r\n      count: 8,\r\n    };\r\n    axios\r\n      .post(\"http://localhost:5000/words/add\", word)\r\n      .then((response) => console.log(\"response.data\", response.data));\r\n\r\n    // add to front\r\n    let temparr = this.state.searchWordsFromDB;\r\n    this.setState({\r\n      searchWordsFromDB: temparr,\r\n    });\r\n    console.log(\"adding front\", this.state.searchWordsFromDB);\r\n\r\n    // get gNews articles by searchword\r\n\r\n    let wordForSearching = searchword === \"\" ? \"news\" : searchword;\r\n\r\n    fetch(\r\n      `https://gnews.io/api/v4/search?q=${wordForSearching}&in=content&lang=${language}&from=${from}&to=${to}&max=9&token=8dbeb974cde3adbf5fbdb91d32ed9f61`\r\n    )\r\n      .then(function (response) {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        this.setState({ articlesFromGNews: data.articles });\r\n        console.log(this.state.articlesFromGNews);\r\n      });\r\n    console.log(this.state.articlesFromGNews);\r\n  }\r\n\r\n  render() {\r\n    const searchContextValue = {\r\n      handleSearch: this.handleSearch,\r\n      searchWordsFromDB: this.state.searchWordsFromDB,\r\n      articlesFromGNews: this.state.articlesFromGNews,\r\n      articleTitlesFromMongo: this.state.articleTitlesFromMongo,\r\n    };\r\n\r\n    return (\r\n      <BrowserRouter>\r\n        <SearchContext.Provider value={searchContextValue}>\r\n          <Header />\r\n          <Switch>\r\n            <Route path=\"/\" component={Articles} exact={true} />\r\n            <Route path=\"/titles\" component={Titles} />\r\n            <Route path=\"/words\" component={Words} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </SearchContext.Provider>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppRouter;\r\n"]},"metadata":{},"sourceType":"module"}